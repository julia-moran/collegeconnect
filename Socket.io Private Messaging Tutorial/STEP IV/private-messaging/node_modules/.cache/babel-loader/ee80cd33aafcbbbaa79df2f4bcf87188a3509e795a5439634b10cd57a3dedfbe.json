{"ast":null,"code":"import SelectUsername from \"./components/SelectUsername\";\nimport Chat from \"./components/Chat\";\nimport socket from \"./socket\";\nexport default {\n  name: \"App\",\n  components: {\n    Chat,\n    SelectUsername\n  },\n  data() {\n    return {\n      usernameAlreadySelected: false\n    };\n  },\n  methods: {\n    onUsernameSelection(username) {\n      this.usernameAlreadySelected = true;\n      socket.auth = {\n        username\n      };\n      socket.connect();\n    }\n  },\n  created() {\n    const sessionID = localStorage.getItem(\"sessionID\");\n    if (sessionID) {\n      this.usernameAlreadySelected = true;\n      socket.auth = {\n        sessionID\n      };\n      socket.connect();\n    }\n    socket.on(\"session\", ({\n      sessionID,\n      userID\n    }) => {\n      // attach the session ID to the next reconnection attempts\n      socket.auth = {\n        sessionID\n      };\n      // store it in the localStorage\n      localStorage.setItem(\"sessionID\", sessionID);\n      // save the ID of the user\n      socket.userID = userID;\n    });\n    socket.on(\"connect_error\", err => {\n      if (err.message === \"invalid username\") {\n        this.usernameAlreadySelected = false;\n      }\n    });\n  },\n  destroyed() {\n    socket.off(\"connect_error\");\n  }\n};","map":{"version":3,"names":["SelectUsername","Chat","socket","name","components","data","usernameAlreadySelected","methods","onUsernameSelection","username","auth","connect","created","sessionID","localStorage","getItem","on","userID","setItem","err","message","destroyed","off"],"sources":["src/App.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <select-username\r\n      v-if=\"!usernameAlreadySelected\"\r\n      @input=\"onUsernameSelection\"\r\n    />\r\n    <chat v-else />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SelectUsername from \"./components/SelectUsername\";\r\nimport Chat from \"./components/Chat\";\r\nimport socket from \"./socket\";\r\n\r\nexport default {\r\n  name: \"App\",\r\n  components: {\r\n    Chat,\r\n    SelectUsername,\r\n  },\r\n  data() {\r\n    return {\r\n      usernameAlreadySelected: false,\r\n    };\r\n  },\r\n  methods: {\r\n    onUsernameSelection(username) {\r\n      this.usernameAlreadySelected = true;\r\n      socket.auth = { username };\r\n      socket.connect();\r\n    },\r\n  },\r\n  created() {\r\n    const sessionID = localStorage.getItem(\"sessionID\");\r\n\r\n    if (sessionID) {\r\n      this.usernameAlreadySelected = true;\r\n      socket.auth = { sessionID };\r\n      socket.connect();\r\n    }\r\n\r\n    socket.on(\"session\", ({ sessionID, userID }) => {\r\n      // attach the session ID to the next reconnection attempts\r\n      socket.auth = { sessionID };\r\n      // store it in the localStorage\r\n      localStorage.setItem(\"sessionID\", sessionID);\r\n      // save the ID of the user\r\n      socket.userID = userID;\r\n    });\r\n\r\n    socket.on(\"connect_error\", (err) => {\r\n      if (err.message === \"invalid username\") {\r\n        this.usernameAlreadySelected = false;\r\n      }\r\n    });\r\n  },\r\n  destroyed() {\r\n    socket.off(\"connect_error\");\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nbody {\r\n  margin: 0;\r\n}\r\n\r\n@font-face {\r\n  font-family: Lato;\r\n  src: \"~/public/fonts/Lato-Regular.ttf\";\r\n}\r\n\r\n#app {\r\n  font-family: Lato, Arial, sans-serif;\r\n  font-size: 14px;\r\n}\r\n</style>\r\n"],"mappings":"AAWA,OAAAA,cAAA;AACA,OAAAC,IAAA;AACA,OAAAC,MAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAH,IAAA;IACAD;EACA;EACAK,KAAA;IACA;MACAC,uBAAA;IACA;EACA;EACAC,OAAA;IACAC,oBAAAC,QAAA;MACA,KAAAH,uBAAA;MACAJ,MAAA,CAAAQ,IAAA;QAAAD;MAAA;MACAP,MAAA,CAAAS,OAAA;IACA;EACA;EACAC,QAAA;IACA,MAAAC,SAAA,GAAAC,YAAA,CAAAC,OAAA;IAEA,IAAAF,SAAA;MACA,KAAAP,uBAAA;MACAJ,MAAA,CAAAQ,IAAA;QAAAG;MAAA;MACAX,MAAA,CAAAS,OAAA;IACA;IAEAT,MAAA,CAAAc,EAAA;MAAAH,SAAA;MAAAI;IAAA;MACA;MACAf,MAAA,CAAAQ,IAAA;QAAAG;MAAA;MACA;MACAC,YAAA,CAAAI,OAAA,cAAAL,SAAA;MACA;MACAX,MAAA,CAAAe,MAAA,GAAAA,MAAA;IACA;IAEAf,MAAA,CAAAc,EAAA,kBAAAG,GAAA;MACA,IAAAA,GAAA,CAAAC,OAAA;QACA,KAAAd,uBAAA;MACA;IACA;EACA;EACAe,UAAA;IACAnB,MAAA,CAAAoB,GAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}