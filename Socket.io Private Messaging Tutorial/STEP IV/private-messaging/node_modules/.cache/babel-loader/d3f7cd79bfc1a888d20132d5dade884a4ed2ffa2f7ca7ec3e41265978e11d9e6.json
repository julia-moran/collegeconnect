{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport socket from \"../socket\";\nimport User from \"./User\";\nimport MessagePanel from \"./MessagePanel\";\nexport default {\n  name: \"Chat\",\n  components: {\n    User,\n    MessagePanel\n  },\n  data() {\n    return {\n      selectedUser: null,\n      users: []\n    };\n  },\n  methods: {\n    onMessage(content) {\n      if (this.selectedUser) {\n        socket.emit(\"private message\", {\n          content,\n          to: this.selectedUser.userID\n        });\n        this.selectedUser.messages.push({\n          content,\n          fromSelf: true\n        });\n      }\n    },\n    onSelectUser(user) {\n      this.selectedUser = user;\n      user.hasNewMessages = false;\n    }\n  },\n  created() {\n    socket.on(\"connect\", () => {\n      this.users.forEach(user => {\n        if (user.self) {\n          user.connected = true;\n        }\n      });\n    });\n    socket.on(\"disconnect\", () => {\n      this.users.forEach(user => {\n        if (user.self) {\n          user.connected = false;\n        }\n      });\n    });\n    const initReactiveProperties = user => {\n      user.hasNewMessages = false;\n    };\n    socket.on(\"users\", users => {\n      users.forEach(user => {\n        user.messages.forEach(message => {\n          message.fromSelf = message.from === socket.userID;\n        });\n        for (let i = 0; i < this.users.length; i++) {\n          const existingUser = this.users[i];\n          if (existingUser.userID === user.userID) {\n            existingUser.connected = user.connected;\n            existingUser.messages = user.messages;\n            return;\n          }\n        }\n        user.self = user.userID === socket.userID;\n        initReactiveProperties(user);\n        this.users.push(user);\n      });\n      // put the current user first, and sort by username\n      this.users.sort((a, b) => {\n        if (a.self) return -1;\n        if (b.self) return 1;\n        if (a.username < b.username) return -1;\n        return a.username > b.username ? 1 : 0;\n      });\n    });\n    socket.on(\"user connected\", user => {\n      for (let i = 0; i < this.users.length; i++) {\n        const existingUser = this.users[i];\n        if (existingUser.userID === user.userID) {\n          existingUser.connected = true;\n          return;\n        }\n      }\n      initReactiveProperties(user);\n      this.users.push(user);\n    });\n    socket.on(\"user disconnected\", id => {\n      for (let i = 0; i < this.users.length; i++) {\n        const user = this.users[i];\n        if (user.userID === id) {\n          user.connected = false;\n          break;\n        }\n      }\n    });\n    socket.on(\"private message\", ({\n      content,\n      from,\n      to\n    }) => {\n      for (let i = 0; i < this.users.length; i++) {\n        const user = this.users[i];\n        const fromSelf = socket.userID === from;\n        if (user.userID === (fromSelf ? to : from)) {\n          user.messages.push({\n            content,\n            fromSelf\n          });\n          if (user !== this.selectedUser) {\n            user.hasNewMessages = true;\n          }\n          break;\n        }\n      }\n    });\n  },\n  destroyed() {\n    socket.off(\"connect\");\n    socket.off(\"disconnect\");\n    socket.off(\"users\");\n    socket.off(\"user connected\");\n    socket.off(\"user disconnected\");\n    socket.off(\"private message\");\n  }\n};","map":{"version":3,"names":["socket","User","MessagePanel","name","components","data","selectedUser","users","methods","onMessage","content","emit","to","userID","messages","push","fromSelf","onSelectUser","user","hasNewMessages","created","on","forEach","self","connected","initReactiveProperties","message","from","i","length","existingUser","sort","a","b","username","id","destroyed","off"],"sources":["src/components/Chat.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"left-panel\">\r\n      <user\r\n        v-for=\"user in users\"\r\n        :key=\"user.userID\"\r\n        :user=\"user\"\r\n        :selected=\"selectedUser === user\"\r\n        @select=\"onSelectUser(user)\"\r\n      />\r\n    </div>\r\n    <message-panel\r\n      v-if=\"selectedUser\"\r\n      :user=\"selectedUser\"\r\n      @input=\"onMessage\"\r\n      class=\"right-panel\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport socket from \"../socket\";\r\nimport User from \"./User\";\r\nimport MessagePanel from \"./MessagePanel\";\r\n\r\nexport default {\r\n  name: \"Chat\",\r\n  components: { User, MessagePanel },\r\n  data() {\r\n    return {\r\n      selectedUser: null,\r\n      users: [],\r\n    };\r\n  },\r\n  methods: {\r\n    onMessage(content) {\r\n      if (this.selectedUser) {\r\n        socket.emit(\"private message\", {\r\n          content,\r\n          to: this.selectedUser.userID,\r\n        });\r\n        this.selectedUser.messages.push({\r\n          content,\r\n          fromSelf: true,\r\n        });\r\n      }\r\n    },\r\n    onSelectUser(user) {\r\n      this.selectedUser = user;\r\n      user.hasNewMessages = false;\r\n    },\r\n  },\r\n  created() {\r\n    socket.on(\"connect\", () => {\r\n      this.users.forEach((user) => {\r\n        if (user.self) {\r\n          user.connected = true;\r\n        }\r\n      });\r\n    });\r\n\r\n    socket.on(\"disconnect\", () => {\r\n      this.users.forEach((user) => {\r\n        if (user.self) {\r\n          user.connected = false;\r\n        }\r\n      });\r\n    });\r\n\r\n    const initReactiveProperties = (user) => {\r\n      user.hasNewMessages = false;\r\n    };\r\n\r\n    socket.on(\"users\", (users) => {\r\n      users.forEach((user) => {\r\n        user.messages.forEach((message) => {\r\n          message.fromSelf = message.from === socket.userID;\r\n        });\r\n        for (let i = 0; i < this.users.length; i++) {\r\n          const existingUser = this.users[i];\r\n          if (existingUser.userID === user.userID) {\r\n            existingUser.connected = user.connected;\r\n            existingUser.messages = user.messages;\r\n            return;\r\n          }\r\n        }\r\n        user.self = user.userID === socket.userID;\r\n        initReactiveProperties(user);\r\n        this.users.push(user);\r\n      });\r\n      // put the current user first, and sort by username\r\n      this.users.sort((a, b) => {\r\n        if (a.self) return -1;\r\n        if (b.self) return 1;\r\n        if (a.username < b.username) return -1;\r\n        return a.username > b.username ? 1 : 0;\r\n      });\r\n    });\r\n\r\n    socket.on(\"user connected\", (user) => {\r\n      for (let i = 0; i < this.users.length; i++) {\r\n        const existingUser = this.users[i];\r\n        if (existingUser.userID === user.userID) {\r\n          existingUser.connected = true;\r\n          return;\r\n        }\r\n      }\r\n      initReactiveProperties(user);\r\n      this.users.push(user);\r\n    });\r\n\r\n    socket.on(\"user disconnected\", (id) => {\r\n      for (let i = 0; i < this.users.length; i++) {\r\n        const user = this.users[i];\r\n        if (user.userID === id) {\r\n          user.connected = false;\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n    socket.on(\"private message\", ({ content, from, to }) => {\r\n      for (let i = 0; i < this.users.length; i++) {\r\n        const user = this.users[i];\r\n        const fromSelf = socket.userID === from;\r\n        if (user.userID === (fromSelf ? to : from)) {\r\n          user.messages.push({\r\n            content,\r\n            fromSelf,\r\n          });\r\n          if (user !== this.selectedUser) {\r\n            user.hasNewMessages = true;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    });\r\n  },\r\n  destroyed() {\r\n    socket.off(\"connect\");\r\n    socket.off(\"disconnect\");\r\n    socket.off(\"users\");\r\n    socket.off(\"user connected\");\r\n    socket.off(\"user disconnected\");\r\n    socket.off(\"private message\");\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.left-panel {\r\n  position: fixed;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  width: 260px;\r\n  overflow-x: hidden;\r\n  background-color: #3f0e40;\r\n  color: white;\r\n}\r\n\r\n.right-panel {\r\n  margin-left: 260px;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}